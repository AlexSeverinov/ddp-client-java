{"name":"Meteor Client for Java","tagline":"Event-Driven Meteor Integration For The JRE.","body":"[![Build Status](https://travis-ci.org/sailorgeoffrey/ddp-client-java.png?branch=master)](https://travis-ci.org/sailorgeoffrey/ddp-client-java)\r\n\r\n**\"Meteor is an open-source platform for building top-quality web apps in a fraction of the time, whether you're an expert developer or just getting started.\"  [-Meteor Website](https://www.meteor.com/)**\r\n\r\nThis library allows Java developers to make clients for Meteor web applications that can take advantage of [data subscriptions](http://docs.meteor.com/#publishandsubscribe) and published [RPC methods](http://docs.meteor.com/#methods_header).\r\n\r\n##Quick Start\r\n\r\n**Note: This project requires JDK 1.8 and Gradle.**\r\nA backport to JDK 1.7 can be found in [this branch](https://github.com/sailorgeoffrey/ddp-client-java/tree/jdk7)\r\n\r\n* Checkout this repo\r\n* Run the meteor app locally\r\n```\r\ncd examples/meteor-common\r\nmeteor\r\n```\r\n* Build and run a sample application\r\n```\r\ngradle jar\r\njava -jar examples/simple-subscription/build/libs/simple-subscription.jar\r\n```\r\n\r\n* Open a web browser and go to http://localhost:3000\r\n* Enjoy!\r\n\r\n##Maven/Gradle Dependency\r\nRelease versions of this library are published to the Maven Central Repository.\r\nIf you are using Maven, add the dependency to your pom.xml\r\n```xml\r\n    <dependency>\r\n        <groupId>io.advantageous.ddp</groupId>\r\n        <artifactId>ddp-client</artifactId>\r\n        <version>0.5.4</version>\r\n    </dependency>\r\n```\r\nIf you are using Gradle\r\n```groovy\r\n    compile 'io.advantageous.ddp:ddp-client:0.5.4'\r\n```\r\n\r\n##Components\r\n\r\nThis library can be described by breaking it into three main parts.\r\n\r\n * Common Message Components\r\n * Subscription Adapters\r\n * RPC Client\r\n\r\nThe package structure represents this grouping as well.\r\n\r\n###DDPMessageEndpoint\r\nThe message endpont is the websocket endpoint for all the DDP messages.  The endpoint is responsible for handling the\r\nconnection to the Meteor server and dispatching DDP messages to listeners.  Listeners are registered with the\r\nregisterHandler method.\r\n\r\nThe constructor takes two arguments: a javax.websocket.WebsocketContainer, and a MessageConverter.\r\n\r\n```java\r\n    DDPMessageEndpoint endpoint = new DDPMessageEndpointImpl(webSocketContainer, messageConverter);\r\n\r\n    endpoint.registerHandler(ConnectedMessage.class, message ->\r\n            System.out.println(\"connected to server! session: \" + message.getSession()));\r\n```\r\n\r\n###MessageConverter\r\nThe message converter is what converts a DDP message into a strongly typed Java message object.  The only included\r\nimplementation is a JSONMessageConverter because the Meteor server uses JSON over websocket by default.  The reason this\r\nwas abstracted out of the main client is because one could potentially use another serialization strategy here.\r\n(Google's Protocol Buffers, for example)\r\n\r\n###SubscriptionAdapter\r\nA subscription adapter is responsible for subscribing and unsubscribing from collections and handling subscription\r\nmessages.  This library includes a MapSubscription adapter that updates a java.util.Map from subscription messages.  The\r\nmap is injected into the MapSubscriptionAdapter so that you can use a simple HashMap or any map provider. (Memcached,\r\nJGroups, etc.)\r\n\r\nYou can also extend the BaseSubscriptionAdapter to use any other local storage.  (minimongo anyone?)\r\n\r\n```java\r\n    Map<String, Map<String, Object>> dataMap = new HashMap<>();\r\n\r\n    SubscriptionAdapter adapter = new MapSubscriptionAdapter(\r\n            endpoint,\r\n            new JsonObjectConverter(),\r\n            dataMap\r\n    );\r\n\r\n    // Subscribe to a collection when a connection is established\r\n    endpoint.registerHandler(ConnectedMessage.class, message -> {\r\n        try {\r\n            adapter.subscribe(new Subscription(\"employees\", Employee.class));\r\n        } catch (IOException e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    });\r\n\r\n```\r\n\r\n###ObjectConverter\r\nThe object convert is what converts Added and Changed DDP messages into their mapped Java objects.  The only included\r\nconverter is a JSON converter, but an EJSON converter would be handy in the future.\r\n\r\n###RPCClient\r\nThe RPC client is used to call Meteor.method functions.  The call method requires callbacks for success and failure.\r\n","google":"UA-49038936-1","note":"Don't delete this file! It's used internally to help with page regeneration."}